# syntax=docker/dockerfile:1.7
FROM public.ecr.aws/docker/library/ruby:3.3-slim

ENV LANG=C.UTF-8 TZ=Asia/Tokyo \
    BUNDLE_JOBS=2 BUNDLE_RETRY=3 \
    RAILS_ENV=production RACK_ENV=production \
    RAILS_LOG_TO_STDOUT=true

RUN apt-get update -y && apt-get install -y --no-install-recommends \
    build-essential libpq-dev pkg-config git curl ca-certificates \
    libyaml-dev libssl-dev zlib1g-dev \
    nodejs npm \
  && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# 先にGemを入れてキャッシュを効かせる
COPY Gemfile Gemfile.lock ./
RUN gem install bundler -N \
&& bundle config set without 'development test' \
&& bundle config set force_ruby_platform true \
&& bundle install -j2

# ← Node 依存（package.json）があるなら先に入れてキャッシュを効かせる
#    * package-lock.json があるなら一緒にCOPYして npm ci を使うのがベスト
COPY package.json package-lock.json* ./
RUN test -f package.json && (npm ci || npm install) || true

RUN npm install --no-audit --no-fund bootstrap@5 @popperjs/core bootstrap-icons@1

# node_modules を Sass のロードパスに通す
ENV SASS_PATH=node_modules

# アプリ本体
COPY . .

# ビルド時はダミーの SECRET_KEY_BASE を渡す（実行時は .env の本物を使用）
ARG DATABASE_URL
RUN SECRET_KEY_BASE=dummy bundle exec rails assets:precompile

EXPOSE 3000
CMD ["bash","-lc","bundle exec rails db:prepare && bundle exec rails server -b 0.0.0.0 -p 3000"]