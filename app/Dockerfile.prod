# syntax=docker/dockerfile:1.7
FROM public.ecr.aws/docker/library/ruby:3.3-slim
#FROM ruby:3.3-slim

ENV LANG=C.UTF-8 TZ=Asia/Tokyo \
    BUNDLE_JOBS=2 BUNDLE_RETRY=3 \
    RAILS_ENV=production RACK_ENV=production \
    RAILS_LOG_TO_STDOUT=true

RUN apt-get update -y && apt-get install -y --no-install-recommends \
    build-essential libpq-dev pkg-config git curl ca-certificates \
    libyaml-dev libssl-dev zlib1g-dev \
    nodejs npm \
  && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# ---- Ruby deps（キャッシュ用）----
COPY Gemfile Gemfile.lock ./
RUN gem install bundler -N \
 && bundle config set without 'development test' \
 && bundle config set force_ruby_platform true \
 && bundle install -j2

# ---- Node deps（キャッシュ用）----
# package-lock.json があれば npm ci、無ければ npm install
COPY package.json package-lock.json* ./
RUN --mount=type=cache,target=/root/.npm \
    if [ -f package-lock.json ]; then npm ci; else npm install; fi

# node_modules を Sass のロードパスに通す
ENV SASS_PATH=node_modules

# アプリ本体
COPY . .


# ここで CSS ビルド（bootstrap-icons のコピーも行われる）
# 失敗したら止める（存在チェックも追加）
RUN npm run build:css \
 && test -f app/assets/builds/bootstrap-icons/bootstrap-icons.css \
 && test -f node_modules/bootstrap-icons/font/bootstrap-icons.css

# precompile（BuildKit secret を読む）
RUN --mount=type=secret,id=rails_master_key \
    RAILS_MASTER_KEY="$(cat /run/secrets/rails_master_key)" \
    SECRET_KEY_BASE=dummy \
    bin/rails assets:precompile

EXPOSE 3000
CMD ["bash","-lc","bundle exec rails db:prepare && bundle exec rails server -b 0.0.0.0 -p 3000"]
